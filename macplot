#!/usr/bin/env python3
import json
import csv
import subprocess
import re
import requests
from datetime import datetime, timedelta
from functools import reduce
from sys import argv
from time import sleep

def system(cmd):
    return subprocess.run(['/bin/sh', '-c', cmd], capture_output=True).stdout

def strip_empty(l):
    return [i for i in l if len(i) > 0]

def capture(capturename):
    filename = capturename + '.json'
    samples = []
    starttime = datetime.now()
    try:
        while True:
            istat = requests.get('http://localhost:4027/api/')
            timestamp = datetime.now() - starttime
            samples.append({'timestamp': timestamp / timedelta(seconds=1),
                            'istatistica': json.loads(istat.text)})
            sleep(1)
    except:
        pass
    f = open(filename, 'w')
    json.dump(samples, f)
    return samples

def plot(samples, capturename):
    w = csv.writer(open(capturename + '.csv', 'w'))
    w.writerow(['time (s)', 'cpu (%)', 'fan (rpm)', 'P-cluster (â„ƒ)', 'battery (%)', 'disk read (MB/s)', 'disk write (MB/s)', 'net down (KB/s)', 'net up (KB/s)', 'mem free (MB)', 'mem inactive (MB)', 'mem used (MB)', 'mem wired (MB)', 'mem other (MB)'])
    for sample in samples:
        istat = sample['istatistica']
        temps = istat['sensors']
        temps = [temps[k] for k in temps.keys() if k.split(' ')[0] == 'pACC']
        temps = [int(i) for i in temps if i != '' and int(i) != 0]
        row = [int(sample['timestamp'])]
        row.append(int(istat['summary_cpuLoad'] * 100))
        row.append(istat['sensors_fansData'].rstrip())
        row.append(int(reduce(lambda x, y: x + y, temps) / len(temps)))
        row.append(istat['battery_charge'])
        row.append(int(istat['diskIO_speedRead'] / 1000000))
        row.append(int(istat['diskIO_speedWrite'] / 1000000))
        row.append(int(istat['network_speedDownload'] / 1000))
        row.append(int(istat['network_speedUpload'] / 1000))
        row.append(int(istat['summary_memoryFree'] / 1000000))
        row.append(int(istat['summary_memoryInactive'] / 1000000))
        row.append(int(istat['summary_memoryUsed'] / 1000000))
        row.append(int(istat['summary_memoryWired'] / 1000000))
        row.append(int(istat['summary_memoryOther'] / 1000000))
        w.writerow(row)
    system('open \'%s.csv\'' % cap)

if __name__ == '__main__':
    if len(argv) == 1:
        cap = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        plot(capture(cap), cap)
    elif argv[1][0] == 'c':
        capture(datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
    elif argv[1][0] == 'p':
        plot(json.load(open(argv[2] + '.json', 'r')))
    else:
        print('MacPlot by chrissx <chrissx@chrissx.de>')
        print('Usage:')
        print('%s: capture and plot in one command')
        print('%s c[capture]: capture data' % argv[0])
        print('%s p[plot] [cap]: prepare the data and open numbers for plotting' % argv[0])
